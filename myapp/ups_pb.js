/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.UCommands', null, global);
goog.exportSymbol('proto.UConnect', null, global);
goog.exportSymbol('proto.UConnected', null, global);
goog.exportSymbol('proto.UDeliveryLocation', null, global);
goog.exportSymbol('proto.UDeliveryMade', null, global);
goog.exportSymbol('proto.UErr', null, global);
goog.exportSymbol('proto.UFinished', null, global);
goog.exportSymbol('proto.UGoDeliver', null, global);
goog.exportSymbol('proto.UGoPickup', null, global);
goog.exportSymbol('proto.UInitTruck', null, global);
goog.exportSymbol('proto.UQuery', null, global);
goog.exportSymbol('proto.UResponses', null, global);
goog.exportSymbol('proto.UTruck', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UInitTruck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UInitTruck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UInitTruck.displayName = 'proto.UInitTruck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UInitTruck.prototype.toObject = function(opt_includeInstance) {
  return proto.UInitTruck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UInitTruck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UInitTruck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    x: jspb.Message.getField(msg, 2),
    y: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UInitTruck}
 */
proto.UInitTruck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UInitTruck;
  return proto.UInitTruck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UInitTruck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UInitTruck}
 */
proto.UInitTruck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UInitTruck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UInitTruck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UInitTruck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UInitTruck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.UInitTruck.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UInitTruck.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UInitTruck.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UInitTruck.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 x = 2;
 * @return {number}
 */
proto.UInitTruck.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UInitTruck.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UInitTruck.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UInitTruck.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 y = 3;
 * @return {number}
 */
proto.UInitTruck.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UInitTruck.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UInitTruck.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UInitTruck.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UConnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UConnect.repeatedFields_, null);
};
goog.inherits(proto.UConnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UConnect.displayName = 'proto.UConnect';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UConnect.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UConnect.prototype.toObject = function(opt_includeInstance) {
  return proto.UConnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UConnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UConnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldid: jspb.Message.getField(msg, 1),
    trucksList: jspb.Message.toObjectList(msg.getTrucksList(),
    proto.UInitTruck.toObject, includeInstance),
    isamazon: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UConnect}
 */
proto.UConnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UConnect;
  return proto.UConnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UConnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UConnect}
 */
proto.UConnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorldid(value);
      break;
    case 2:
      var value = new proto.UInitTruck;
      reader.readMessage(value,proto.UInitTruck.deserializeBinaryFromReader);
      msg.addTrucks(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsamazon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UConnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UConnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UConnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UConnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTrucksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UInitTruck.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 worldid = 1;
 * @return {number}
 */
proto.UConnect.prototype.getWorldid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UConnect.prototype.setWorldid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UConnect.prototype.clearWorldid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UConnect.prototype.hasWorldid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UInitTruck trucks = 2;
 * @return {!Array<!proto.UInitTruck>}
 */
proto.UConnect.prototype.getTrucksList = function() {
  return /** @type{!Array<!proto.UInitTruck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UInitTruck, 2));
};


/** @param {!Array<!proto.UInitTruck>} value */
proto.UConnect.prototype.setTrucksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UInitTruck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UInitTruck}
 */
proto.UConnect.prototype.addTrucks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UInitTruck, opt_index);
};


proto.UConnect.prototype.clearTrucksList = function() {
  this.setTrucksList([]);
};


/**
 * required bool isAmazon = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UConnect.prototype.getIsamazon = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.UConnect.prototype.setIsamazon = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UConnect.prototype.clearIsamazon = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UConnect.prototype.hasIsamazon = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UConnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UConnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UConnected.displayName = 'proto.UConnected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UConnected.prototype.toObject = function(opt_includeInstance) {
  return proto.UConnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UConnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UConnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldid: jspb.Message.getField(msg, 1),
    result: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UConnected}
 */
proto.UConnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UConnected;
  return proto.UConnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UConnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UConnected}
 */
proto.UConnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorldid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UConnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UConnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UConnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UConnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int64 worldid = 1;
 * @return {number}
 */
proto.UConnected.prototype.getWorldid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UConnected.prototype.setWorldid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UConnected.prototype.clearWorldid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UConnected.prototype.hasWorldid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string result = 2;
 * @return {string}
 */
proto.UConnected.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UConnected.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UConnected.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UConnected.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UGoPickup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UGoPickup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UGoPickup.displayName = 'proto.UGoPickup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UGoPickup.prototype.toObject = function(opt_includeInstance) {
  return proto.UGoPickup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UGoPickup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UGoPickup.toObject = function(includeInstance, msg) {
  var f, obj = {
    truckid: jspb.Message.getField(msg, 1),
    whid: jspb.Message.getField(msg, 2),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UGoPickup}
 */
proto.UGoPickup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UGoPickup;
  return proto.UGoPickup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UGoPickup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UGoPickup}
 */
proto.UGoPickup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWhid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UGoPickup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UGoPickup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UGoPickup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UGoPickup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required int32 truckid = 1;
 * @return {number}
 */
proto.UGoPickup.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UGoPickup.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UGoPickup.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UGoPickup.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 whid = 2;
 * @return {number}
 */
proto.UGoPickup.prototype.getWhid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UGoPickup.prototype.setWhid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UGoPickup.prototype.clearWhid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UGoPickup.prototype.hasWhid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.UGoPickup.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UGoPickup.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UGoPickup.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UGoPickup.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UFinished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UFinished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UFinished.displayName = 'proto.UFinished';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UFinished.prototype.toObject = function(opt_includeInstance) {
  return proto.UFinished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UFinished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UFinished.toObject = function(includeInstance, msg) {
  var f, obj = {
    truckid: jspb.Message.getField(msg, 1),
    x: jspb.Message.getField(msg, 2),
    y: jspb.Message.getField(msg, 3),
    status: jspb.Message.getField(msg, 4),
    seqnum: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UFinished}
 */
proto.UFinished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UFinished;
  return proto.UFinished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UFinished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UFinished}
 */
proto.UFinished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UFinished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UFinished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UFinished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UFinished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * required int32 truckid = 1;
 * @return {number}
 */
proto.UFinished.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UFinished.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UFinished.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UFinished.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 x = 2;
 * @return {number}
 */
proto.UFinished.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UFinished.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UFinished.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UFinished.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 y = 3;
 * @return {number}
 */
proto.UFinished.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UFinished.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UFinished.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UFinished.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string status = 4;
 * @return {string}
 */
proto.UFinished.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.UFinished.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UFinished.prototype.clearStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UFinished.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 seqnum = 5;
 * @return {number}
 */
proto.UFinished.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.UFinished.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.UFinished.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UFinished.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UDeliveryMade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UDeliveryMade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UDeliveryMade.displayName = 'proto.UDeliveryMade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UDeliveryMade.prototype.toObject = function(opt_includeInstance) {
  return proto.UDeliveryMade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UDeliveryMade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UDeliveryMade.toObject = function(includeInstance, msg) {
  var f, obj = {
    truckid: jspb.Message.getField(msg, 1),
    packageid: jspb.Message.getField(msg, 2),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UDeliveryMade}
 */
proto.UDeliveryMade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UDeliveryMade;
  return proto.UDeliveryMade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UDeliveryMade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UDeliveryMade}
 */
proto.UDeliveryMade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPackageid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UDeliveryMade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UDeliveryMade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UDeliveryMade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UDeliveryMade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required int32 truckid = 1;
 * @return {number}
 */
proto.UDeliveryMade.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UDeliveryMade.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UDeliveryMade.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UDeliveryMade.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 packageid = 2;
 * @return {number}
 */
proto.UDeliveryMade.prototype.getPackageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UDeliveryMade.prototype.setPackageid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UDeliveryMade.prototype.clearPackageid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UDeliveryMade.prototype.hasPackageid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.UDeliveryMade.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UDeliveryMade.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UDeliveryMade.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UDeliveryMade.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UDeliveryLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UDeliveryLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UDeliveryLocation.displayName = 'proto.UDeliveryLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UDeliveryLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.UDeliveryLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UDeliveryLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UDeliveryLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageid: jspb.Message.getField(msg, 1),
    x: jspb.Message.getField(msg, 2),
    y: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UDeliveryLocation}
 */
proto.UDeliveryLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UDeliveryLocation;
  return proto.UDeliveryLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UDeliveryLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UDeliveryLocation}
 */
proto.UDeliveryLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPackageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UDeliveryLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UDeliveryLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UDeliveryLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UDeliveryLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 packageid = 1;
 * @return {number}
 */
proto.UDeliveryLocation.prototype.getPackageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UDeliveryLocation.prototype.setPackageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UDeliveryLocation.prototype.clearPackageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UDeliveryLocation.prototype.hasPackageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 x = 2;
 * @return {number}
 */
proto.UDeliveryLocation.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UDeliveryLocation.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UDeliveryLocation.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UDeliveryLocation.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 y = 3;
 * @return {number}
 */
proto.UDeliveryLocation.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UDeliveryLocation.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UDeliveryLocation.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UDeliveryLocation.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UGoDeliver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UGoDeliver.repeatedFields_, null);
};
goog.inherits(proto.UGoDeliver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UGoDeliver.displayName = 'proto.UGoDeliver';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UGoDeliver.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UGoDeliver.prototype.toObject = function(opt_includeInstance) {
  return proto.UGoDeliver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UGoDeliver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UGoDeliver.toObject = function(includeInstance, msg) {
  var f, obj = {
    truckid: jspb.Message.getField(msg, 1),
    packagesList: jspb.Message.toObjectList(msg.getPackagesList(),
    proto.UDeliveryLocation.toObject, includeInstance),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UGoDeliver}
 */
proto.UGoDeliver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UGoDeliver;
  return proto.UGoDeliver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UGoDeliver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UGoDeliver}
 */
proto.UGoDeliver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 2:
      var value = new proto.UDeliveryLocation;
      reader.readMessage(value,proto.UDeliveryLocation.deserializeBinaryFromReader);
      msg.addPackages(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UGoDeliver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UGoDeliver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UGoDeliver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UGoDeliver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPackagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UDeliveryLocation.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required int32 truckid = 1;
 * @return {number}
 */
proto.UGoDeliver.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UGoDeliver.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UGoDeliver.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UGoDeliver.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UDeliveryLocation packages = 2;
 * @return {!Array<!proto.UDeliveryLocation>}
 */
proto.UGoDeliver.prototype.getPackagesList = function() {
  return /** @type{!Array<!proto.UDeliveryLocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UDeliveryLocation, 2));
};


/** @param {!Array<!proto.UDeliveryLocation>} value */
proto.UGoDeliver.prototype.setPackagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UDeliveryLocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UDeliveryLocation}
 */
proto.UGoDeliver.prototype.addPackages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UDeliveryLocation, opt_index);
};


proto.UGoDeliver.prototype.clearPackagesList = function() {
  this.setPackagesList([]);
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.UGoDeliver.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UGoDeliver.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UGoDeliver.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UGoDeliver.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UErr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UErr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UErr.displayName = 'proto.UErr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UErr.prototype.toObject = function(opt_includeInstance) {
  return proto.UErr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UErr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UErr.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1),
    originseqnum: jspb.Message.getField(msg, 2),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UErr}
 */
proto.UErr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UErr;
  return proto.UErr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UErr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UErr}
 */
proto.UErr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOriginseqnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UErr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UErr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UErr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UErr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required string err = 1;
 * @return {string}
 */
proto.UErr.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UErr.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UErr.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UErr.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 originseqnum = 2;
 * @return {number}
 */
proto.UErr.prototype.getOriginseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UErr.prototype.setOriginseqnum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UErr.prototype.clearOriginseqnum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UErr.prototype.hasOriginseqnum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.UErr.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UErr.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UErr.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UErr.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UQuery.displayName = 'proto.UQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.UQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    truckid: jspb.Message.getField(msg, 1),
    seqnum: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UQuery}
 */
proto.UQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UQuery;
  return proto.UQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UQuery}
 */
proto.UQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 truckid = 1;
 * @return {number}
 */
proto.UQuery.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UQuery.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UQuery.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UQuery.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 seqnum = 2;
 * @return {number}
 */
proto.UQuery.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UQuery.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UQuery.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UQuery.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UTruck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UTruck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UTruck.displayName = 'proto.UTruck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UTruck.prototype.toObject = function(opt_includeInstance) {
  return proto.UTruck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UTruck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UTruck.toObject = function(includeInstance, msg) {
  var f, obj = {
    truckid: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    x: jspb.Message.getField(msg, 3),
    y: jspb.Message.getField(msg, 4),
    seqnum: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UTruck}
 */
proto.UTruck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UTruck;
  return proto.UTruck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UTruck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UTruck}
 */
proto.UTruck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UTruck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UTruck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UTruck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UTruck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * required int32 truckid = 1;
 * @return {number}
 */
proto.UTruck.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UTruck.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UTruck.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UTruck.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string status = 2;
 * @return {string}
 */
proto.UTruck.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UTruck.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UTruck.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UTruck.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 x = 3;
 * @return {number}
 */
proto.UTruck.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UTruck.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UTruck.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UTruck.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 y = 4;
 * @return {number}
 */
proto.UTruck.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.UTruck.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UTruck.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UTruck.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 seqnum = 5;
 * @return {number}
 */
proto.UTruck.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.UTruck.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.UTruck.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UTruck.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCommands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UCommands.repeatedFields_, null);
};
goog.inherits(proto.UCommands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCommands.displayName = 'proto.UCommands';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UCommands.repeatedFields_ = [1,2,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCommands.prototype.toObject = function(opt_includeInstance) {
  return proto.UCommands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCommands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCommands.toObject = function(includeInstance, msg) {
  var f, obj = {
    pickupsList: jspb.Message.toObjectList(msg.getPickupsList(),
    proto.UGoPickup.toObject, includeInstance),
    deliveriesList: jspb.Message.toObjectList(msg.getDeliveriesList(),
    proto.UGoDeliver.toObject, includeInstance),
    simspeed: jspb.Message.getField(msg, 3),
    disconnect: jspb.Message.getField(msg, 4),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.UQuery.toObject, includeInstance),
    acksList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCommands}
 */
proto.UCommands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCommands;
  return proto.UCommands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCommands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCommands}
 */
proto.UCommands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UGoPickup;
      reader.readMessage(value,proto.UGoPickup.deserializeBinaryFromReader);
      msg.addPickups(value);
      break;
    case 2:
      var value = new proto.UGoDeliver;
      reader.readMessage(value,proto.UGoDeliver.deserializeBinaryFromReader);
      msg.addDeliveries(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSimspeed(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisconnect(value);
      break;
    case 5:
      var value = new proto.UQuery;
      reader.readMessage(value,proto.UQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addAcks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCommands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCommands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCommands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCommands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPickupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UGoPickup.serializeBinaryToWriter
    );
  }
  f = message.getDeliveriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UGoDeliver.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.UQuery.serializeBinaryToWriter
    );
  }
  f = message.getAcksList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      6,
      f
    );
  }
};


/**
 * repeated UGoPickup pickups = 1;
 * @return {!Array<!proto.UGoPickup>}
 */
proto.UCommands.prototype.getPickupsList = function() {
  return /** @type{!Array<!proto.UGoPickup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UGoPickup, 1));
};


/** @param {!Array<!proto.UGoPickup>} value */
proto.UCommands.prototype.setPickupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UGoPickup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UGoPickup}
 */
proto.UCommands.prototype.addPickups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UGoPickup, opt_index);
};


proto.UCommands.prototype.clearPickupsList = function() {
  this.setPickupsList([]);
};


/**
 * repeated UGoDeliver deliveries = 2;
 * @return {!Array<!proto.UGoDeliver>}
 */
proto.UCommands.prototype.getDeliveriesList = function() {
  return /** @type{!Array<!proto.UGoDeliver>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UGoDeliver, 2));
};


/** @param {!Array<!proto.UGoDeliver>} value */
proto.UCommands.prototype.setDeliveriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UGoDeliver=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UGoDeliver}
 */
proto.UCommands.prototype.addDeliveries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UGoDeliver, opt_index);
};


proto.UCommands.prototype.clearDeliveriesList = function() {
  this.setDeliveriesList([]);
};


/**
 * optional uint32 simspeed = 3;
 * @return {number}
 */
proto.UCommands.prototype.getSimspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UCommands.prototype.setSimspeed = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCommands.prototype.clearSimspeed = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCommands.prototype.hasSimspeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool disconnect = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UCommands.prototype.getDisconnect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.UCommands.prototype.setDisconnect = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UCommands.prototype.clearDisconnect = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCommands.prototype.hasDisconnect = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated UQuery queries = 5;
 * @return {!Array<!proto.UQuery>}
 */
proto.UCommands.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.UQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UQuery, 5));
};


/** @param {!Array<!proto.UQuery>} value */
proto.UCommands.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.UQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UQuery}
 */
proto.UCommands.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.UQuery, opt_index);
};


proto.UCommands.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};


/**
 * repeated int64 acks = 6;
 * @return {!Array<number>}
 */
proto.UCommands.prototype.getAcksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<number>} value */
proto.UCommands.prototype.setAcksList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.UCommands.prototype.addAcks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.UCommands.prototype.clearAcksList = function() {
  this.setAcksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UResponses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UResponses.repeatedFields_, null);
};
goog.inherits(proto.UResponses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UResponses.displayName = 'proto.UResponses';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UResponses.repeatedFields_ = [1,2,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UResponses.prototype.toObject = function(opt_includeInstance) {
  return proto.UResponses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UResponses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UResponses.toObject = function(includeInstance, msg) {
  var f, obj = {
    completionsList: jspb.Message.toObjectList(msg.getCompletionsList(),
    proto.UFinished.toObject, includeInstance),
    deliveredList: jspb.Message.toObjectList(msg.getDeliveredList(),
    proto.UDeliveryMade.toObject, includeInstance),
    finished: jspb.Message.getField(msg, 3),
    acksList: jspb.Message.getRepeatedField(msg, 4),
    truckstatusList: jspb.Message.toObjectList(msg.getTruckstatusList(),
    proto.UTruck.toObject, includeInstance),
    errorList: jspb.Message.toObjectList(msg.getErrorList(),
    proto.UErr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UResponses}
 */
proto.UResponses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UResponses;
  return proto.UResponses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UResponses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UResponses}
 */
proto.UResponses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UFinished;
      reader.readMessage(value,proto.UFinished.deserializeBinaryFromReader);
      msg.addCompletions(value);
      break;
    case 2:
      var value = new proto.UDeliveryMade;
      reader.readMessage(value,proto.UDeliveryMade.deserializeBinaryFromReader);
      msg.addDelivered(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinished(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addAcks(value);
      break;
    case 5:
      var value = new proto.UTruck;
      reader.readMessage(value,proto.UTruck.deserializeBinaryFromReader);
      msg.addTruckstatus(value);
      break;
    case 6:
      var value = new proto.UErr;
      reader.readMessage(value,proto.UErr.deserializeBinaryFromReader);
      msg.addError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UResponses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UResponses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UResponses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UResponses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompletionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UFinished.serializeBinaryToWriter
    );
  }
  f = message.getDeliveredList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UDeliveryMade.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAcksList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      4,
      f
    );
  }
  f = message.getTruckstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.UTruck.serializeBinaryToWriter
    );
  }
  f = message.getErrorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.UErr.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UFinished completions = 1;
 * @return {!Array<!proto.UFinished>}
 */
proto.UResponses.prototype.getCompletionsList = function() {
  return /** @type{!Array<!proto.UFinished>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UFinished, 1));
};


/** @param {!Array<!proto.UFinished>} value */
proto.UResponses.prototype.setCompletionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UFinished=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UFinished}
 */
proto.UResponses.prototype.addCompletions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UFinished, opt_index);
};


proto.UResponses.prototype.clearCompletionsList = function() {
  this.setCompletionsList([]);
};


/**
 * repeated UDeliveryMade delivered = 2;
 * @return {!Array<!proto.UDeliveryMade>}
 */
proto.UResponses.prototype.getDeliveredList = function() {
  return /** @type{!Array<!proto.UDeliveryMade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UDeliveryMade, 2));
};


/** @param {!Array<!proto.UDeliveryMade>} value */
proto.UResponses.prototype.setDeliveredList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UDeliveryMade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UDeliveryMade}
 */
proto.UResponses.prototype.addDelivered = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UDeliveryMade, opt_index);
};


proto.UResponses.prototype.clearDeliveredList = function() {
  this.setDeliveredList([]);
};


/**
 * optional bool finished = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UResponses.prototype.getFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.UResponses.prototype.setFinished = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UResponses.prototype.clearFinished = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UResponses.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated int64 acks = 4;
 * @return {!Array<number>}
 */
proto.UResponses.prototype.getAcksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.UResponses.prototype.setAcksList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.UResponses.prototype.addAcks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.UResponses.prototype.clearAcksList = function() {
  this.setAcksList([]);
};


/**
 * repeated UTruck truckstatus = 5;
 * @return {!Array<!proto.UTruck>}
 */
proto.UResponses.prototype.getTruckstatusList = function() {
  return /** @type{!Array<!proto.UTruck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UTruck, 5));
};


/** @param {!Array<!proto.UTruck>} value */
proto.UResponses.prototype.setTruckstatusList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.UTruck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UTruck}
 */
proto.UResponses.prototype.addTruckstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.UTruck, opt_index);
};


proto.UResponses.prototype.clearTruckstatusList = function() {
  this.setTruckstatusList([]);
};


/**
 * repeated UErr error = 6;
 * @return {!Array<!proto.UErr>}
 */
proto.UResponses.prototype.getErrorList = function() {
  return /** @type{!Array<!proto.UErr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UErr, 6));
};


/** @param {!Array<!proto.UErr>} value */
proto.UResponses.prototype.setErrorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.UErr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UErr}
 */
proto.UResponses.prototype.addError = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.UErr, opt_index);
};


proto.UResponses.prototype.clearErrorList = function() {
  this.setErrorList([]);
};


goog.object.extend(exports, proto);
